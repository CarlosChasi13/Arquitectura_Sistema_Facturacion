# Sistema de Facturaci√≥n Hospitalaria (Backend)

Este proyecto es un servicio RESTful desarrollado con Spring Boot y Hibernate para la gesti√≥n de descargos y facturaci√≥n de servicios y productos m√©dicos en un entorno hospitalario.

---

## üìÇ Estructura del Proyecto

```
backend/
‚îú‚îÄ‚îÄ pom.xml
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ main
    ‚îÇ   ‚îú‚îÄ‚îÄ java/com/backend/hospital
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HospitalApplication.java
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ WebConfig.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StateConfig.java
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controller/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PacienteController.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DescargoController.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaDeTransaccionController.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FacturaController.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductoController.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ServicioController.java
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dto/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PacienteDTO.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DescargoDTO.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DescargoUpdateDTO.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FacturaDTO.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaDTO.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductoDTO.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ServicioDTO.java
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Paciente.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Descargo.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Factura.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaDeTransaccion.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaProducto.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaServicio.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Producto.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ servicio/            ‚Üê herencia de servicios m√©dicos
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Servicio.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AtencionMedica.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ExamenLab.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ImagenRayosX.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProcedimientoMedico.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SuministroMedicamento.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ EstadoDocumento.java
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ repository/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PacienteRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DescargoRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FacturaRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaDeTransaccionRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaProductoRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaServicioRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductoRepository.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ServicioRepository.java
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ service/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PacienteService.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PacienteServiceImpl.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DescargoService.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DescargoServiceImpl.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FacturaService.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FacturaServiceImpl.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaDeTransaccionService.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LineaDeTransaccionServiceImpl.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductoService.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductoServiceImpl.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ServicioService.java
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ServicioServiceImpl.java
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ state/                   ‚Üê Patr√≥n State para Paciente
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ PacienteState.java
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ EstadoIndeterminado.java
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ EstadoBueno.java
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ EstadoRegular.java
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ EstadoSerio.java
    ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ EstadoCritico.java
    ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ EstadoMuerto.java
    ‚îî‚îÄ‚îÄ resources/
        ‚îî‚îÄ‚îÄ application.properties
```

---

## üöÄ Requisitos

* Java 21+
* Maven 3.6+
* MySQL 5.7+ (o compatible)

---

## ‚öôÔ∏è Configuraci√≥n

1. **Clonar el repositorio**

   ```bash
   git clone https://tu-repo.git
   cd backend/hospital
   ```

2. **Crear la base de datos**
   En tu servidor MySQL (por ejemplo con XAMPP), ejecutar:

   ```sql
   CREATE DATABASE sistema_medico
     CHARACTER SET utf8mb4
     COLLATE utf8mb4_unicode_ci;
   ```

3. **Configurar `application.properties`**
   En `src/main/resources/application.properties`, ajusta:

   ```properties
   spring.datasource.url=jdbc:mysql://localhost:3306/sistema_medico?useSSL=false&serverTimezone=UTC
   spring.datasource.username=root
   spring.datasource.password=       # tu contrase√±a, si tienes

   spring.jpa.hibernate.ddl-auto=update
   spring.jpa.show-sql=true
   spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

   server.port=8080
   ```

   > **Nota**: `spring.jpa.hibernate.ddl-auto=update` deja que Hibernate genere/actualice las tablas autom√°ticamente.

---

## üèÉ‚Äç‚ôÇÔ∏è Ejecutar la aplicaci√≥n

Desde la carpeta ra√≠z del proyecto:

```bash
mvn clean spring-boot:run
```

La API quedar√° disponible en `http://localhost:8080/api/...`

---

## üì¶ Endpoints Principales

| Recurso                          | M√©todo | Ruta                                    | Descripci√≥n                                   |
| -------------------------------- | ------ | --------------------------------------- | --------------------------------------------- |
| **Pacientes**                    | GET    | `/api/pacientes`                        | Listar todos los pacientes                    |
|                                  | POST   | `/api/pacientes`                        | Crear nuevo paciente                          |
|                                  | GET    | `/api/pacientes/{id}`                   | Obtener paciente por ID                       |
|                                  | PUT    | `/api/pacientes/{id}`                   | Actualizar paciente                           |
| **Descargos**                    | GET    | `/api/pacientes/{pacienteId}/descargos` | Listar descargos de un paciente               |
|                                  | POST   | `/api/pacientes/{pacienteId}/descargos` | Crear nuevo descargo                          |
| **L√≠neas de descargo / factura** | GET    | `/api/descargos/{descargoId}/lineas`    | Listar l√≠neas de un descargo                  |
|                                  | POST   | `/api/descargos/{descargoId}/lineas`    | Agregar l√≠nea (producto/servicio) al descargo |
| **Facturaci√≥n**                  | POST   | `/api/descargos/{descargoId}/facturar`  | Facturar un descargo                          |
|                                  | GET    | `/api/pacientes/{pacienteId}/factura`   | Obtener √∫ltima factura de un paciente         |
| **Cat√°logo**                     | GET    | `/api/productos`                        | Listar todos los productos                    |
|                                  | POST   | `/api/productos`                        | Crear producto                                |
|                                  | GET    | `/api/servicios`                        | Listar todos los servicios m√©dicos            |
|                                  | POST   | `/api/servicios`                        | Crear servicio m√©dico (elige su tipo)         |

---

## üéØ Patrones de Dise√±o

* **Arquitectura en Capas**:

  * **Controller** ‚Üí HTTP, mapea DTOs
  * **Service** ‚Üí L√≥gica de negocio, transiciones de estado, clonaci√≥n (Prototype)
  * **DAO / Repository** ‚Üí Acceso a datos con Spring Data JPA (Hibernate)
* **State**:

  * `PacienteState` + subclases (`EstadoBueno`, `EstadoCritico`, ‚Ä¶) para controlar comportamiento seg√∫n condici√≥n.
* **Prototype**:

  * `Descargo.clone()` produce copia para la factura original.
* **Factory Method**

  * Selecci√≥n de la subclase de `Servicio` (`AtencionMedica`, `ExamenLab`, ‚Ä¶) en `ServicioServiceImpl`.

---

## üìë Semillas de Datos

Puedes usar [data.sql](src/main/resources/data.sql) para precargar:

```sql
INSERT INTO paciente(...) VALUES (...);
INSERT INTO producto(...) VALUES (...);
INSERT INTO servicio(...) VALUES (...);
```

---

## ü§ù Contribuciones

1. Haz un fork.
2. Crea tu rama (`git checkout -b feature/mi-cambio`).
3. Haz tus modificaciones y push.
4. Abre un Pull Request.

---

## ‚öñÔ∏è Licencia

MIT License ¬© 2025 Tu Nombre

---

¬°Listo para empezar!
